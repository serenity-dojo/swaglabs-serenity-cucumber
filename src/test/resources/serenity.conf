serenity {
;   take.screenshots = FOR_FAILURES
  tag.failures = "true"
  linked.tags = "issue"
  browser {
    width = 1366
    height = 1080
  }
  requirements.dir="src/test/resources/features"
  report {
    accessibility = true
    durations = "1,2,4,8,15,30,60"
    tagtypes = "capability,feature"
    hide.empty.requirements = true
    exclude.tags = "resetappstate,singlebrowser,manual"
  }
}

webdriver {
  driver = "chrome"
  capabilities {
    browserName = "chrome"
    "goog:chromeOptions" {
;       args = ["test-type", "ignore-certificate-errors", "--remote-allow-origins=*",
;         "incognito", "disable-infobars", "disable-gpu", "disable-default-apps", "disable-popup-blocking"]
      extensions = ["src/test/resources/extensions/4.2.4_0.crx"]
    }
  }
}

environment = chrome
environments {
  chrome {
    webdriver {
      driver = "chrome"
      capabilities {
        browserName = "chrome"
        "goog:chromeOptions" {
            args = ["test-type", "ignore-certificate-errors", "--remote-allow-origins=*",
                   "disable-infobars", "disable-gpu", "disable-default-apps", "disable-popup-blocking"]
            extensions = ["src/test/resources/extensions/4.2.4_0.crx"]

         }
      }
    }
  }
  edge {
    webdriver {
      capabilities {
        browserName = "MicrosoftEdge"
        "ms:edgeOptions" {
          args = ["test-type", "ignore-certificate-errors", "headless",
            "incognito", "disable-infobars", "disable-gpu", "disable-default-apps", "disable-popup-blocking"]
        }
      }
    }
  }
  firefox {
    webdriver {
      //      driver = "firefox"
      capabilities {
        browserName = "firefox"

        timeouts {
          implicit = 1000
          script = 1000
          pageLoad = 1000
        }
        pageLoadStrategy = "normal"
        acceptInsecureCerts = true
        unhandledPromptBehavior = "dismiss"
        strictFileInteractability = true

        "moz:firefoxOptions" {
          args = ["-headless"],
          prefs {
            "dom.ipc.processCount": 8,
            "javascript.options.showInConsole": false
          },
          log {"level": "trace"},
          env {
            "MOZ_LOG": "nsHttp:5",
          }
        }
      }
    }
  }
  lambdatest {
    #
    # You define the Lambdatest credentials either in the LT_USERNAME and LT_ACCESS_KEY environment variables, or by
    # setting the following properties:
    #
    # lt.user = your.username
    # lt.key = your.access.key
    #
    # You can also override the Lambdatest grid url by setting the following property.
    # lt.grid="hub.lambdatest.com"

    webdriver {
      driver = "remote"
      # You can specify the remote URL explicitly, or let the serenity-lambdatest library do it for you
      # remote.url = "https://"${LT_USERNAME}":"${LT_ACCESS_KEY}"@hub.lambdatest.com/wd/hub"
      capabilities {
        browserName = "chrome"
        version = "104.0"
        platform = "Windows 10"
        #
        # Any LambdaTest-specific options go in the 'LT:Options' sectipn
        #
        "LT:Options" {
          build = "Sample Build"
          selenium_version = "4.0.0"
          plugin = "java-junit"
          network = true // To enable network logs
          visual = true // To enable step by step screenshot
          video = true // To enable video recording
          console = true // To capture console logs
        }
        #
        # Chrome options to be passed to the remote driver
        #
        "goog:chromeOptions" {
          args = ["test-type", "ignore-certificate-errors", "headless"
            "incognito", "disable-infobars", "disable-gpu", "disable-default-apps", "disable-popup-blocking"]
        }
      }
    }
  }
  browserstack {
    #
    # You define the BrowserStack credentials either in the BROWSERSTACK_USER and BROWSERSTACK_KEY environment variables, or by
    # setting the following properties:
    #
    # browserstack.user = your.username
    # browserstack.key = your.access.key
    #
    webdriver {
      driver = "remote"
      # You can specify the remote URL explicitly, or let the serenity-browserstack library do it for you
      capabilities {
        browserName = "Chrome"
        browserVersion = "latest"
        #
        # Any Browserstack-specific options go in the 'bstack:Options' sectipn
        #
        "bstack:options" {
          os = "Windows"
          osVersion = "11"
          resolution = "1920x1200"
          seleniumVersion = "4.1.2"
          video = true
        }
      }
    }
  }
  saucelabs {
    #
    # You define the BrowserStack credentials either in the BROWSERSTACK_USER and BROWSERSTACK_KEY environment variables, or by
    # setting the following properties:
    #
    # browserstack.user = your.username
    # browserstack.key = your.access.key
    #
    webdriver {
      driver = "remote"
      remote.url = "https://ondemand.us-west-1.saucelabs.com/wd/hub"

      platformName = "Windows 10"
      capabilities {
        browserName = "Chrome"
        browserVersion = "latest"
        #
        # Any Saucelabs-specific options go in the 'sauce:Options' sectipn
        #
        "sauce:options" {
          screenResolution = "1920x1200"
        }
      }
    }
  }
}

