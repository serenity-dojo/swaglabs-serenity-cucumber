serenity {
  //  take.screenshots = FOR_FAILURES
  store.html = ALWAYS
  tag.failures = "true"
  linked.tags = "issue"
  browser {
    width = 1366
    height = 1080
  }
  report {
    accessibility = true
    durations = "1,2,4,8,15,30,60"
    tagtypes = "capability,feature"
    hide.empty.requirements = true
    exclude.tags = "resetappstate,singlebrowser,manual"
  }
}


headless.mode = false

//environment = run_with_chrome
environment = saucelabs

environments {
  run_with_chrome {
    webdriver {
      driver = chrome
      autodownload = true
      capabilities {
        browserName = "chrome"
        acceptInsecureCerts = true
        "goog:chromeOptions" {
          args = ["test-type", "ignore-certificate-errors", "headless", "--window-size=1000,800"
            "incognito", "disable-infobars", "disable-gpu", "disable-default-apps", "disable-popup-blocking"]
        }
      }
    }
  }
  edge {
    webdriver {
      capabilities {
        browserName = "MicrosoftEdge"
        acceptInsecureCerts = true
        "ms:edgeOptions" {
          args = ["test-type", "ignore-certificate-errors",
            "incognito", "disable-infobars", "disable-gpu", "disable-default-apps", "disable-popup-blocking"]
        }
      }
    }
  }
  firefox {
    webdriver {
      capabilities {
        browserName = "firefox"
        pageLoadStrategy = "normal"
        acceptInsecureCerts = true
        unhandledPromptBehavior = "dismiss"
        strictFileInteractability = true

        "moz:firefoxOptions" {
          args = ["-headless"],
          prefs {
            "javascript.options.showInConsole": false
          },
          log {"level": "info"},
        }
      }
    }
  }

  grid {
    webdriver {
      driver = remote
      remote.url = "http://192.168.1.191:4444"
      autodownload = true
      capabilities {
        browserName: "chrome"
        platformName: "mac"
        "goog:chromeOptions" {
          "args" = ["--remote-allow-origins=*"]
        },
      }
    }
  }


  lambdatest {
    #
    # You define the Lambdatest credentials either in the LT_USERNAME and LT_ACCESS_KEY environment variables, or by
    # setting the following properties:
    #
    # lt.user = your.username
    # lt.key = your.access.key
    #
    # You can also override the Lambdatest grid url by setting the following property.
    # lt.grid="hub.lambdatest.com"

    webdriver {
      driver = "remote"
      remote.url = "https://"${LT_USERNAME}":"${LT_ACCESS_KEY}"@hub.lambdatest.com/wd/hub"
      capabilities {
        browserName = "chrome"
        //        version = "104.0"
        //        platform = "Windows 10"
        #
        # Any LambdaTest-specific options go in the 'LT:Options' sectipn
        #
        "LT:Options" {
          build = "Sample Build"
          selenium_version = "4.0.0"
          plugin = "java-junit"
          network = true // To enable network logs
          visual = true // To enable step by step screenshot
          video = true // To enable video recording
          console = true // To capture console logs
        }
        #
        # Chrome options to be passed to the remote driver
        #
        "goog:chromeOptions" {
          args = ["test-type", "ignore-certificate-errors", "headless"
            "incognito", "disable-infobars", "disable-gpu", "disable-default-apps", "disable-popup-blocking"]
        }
      }
    }
  }
  browserstack {
    #
    # You define the BrowserStack credentials either in the BROWSERSTACK_USER and BROWSERSTACK_KEY environment variables, or by
    # setting the following properties:
    #
    # browserstack.user = your.username
    # browserstack.key = your.access.key
    #
    webdriver {
      driver = "remote"
      remote.url = "https://"${BROWSERSTACK_USER}":"${BROWSERSTACK_KEY}"@hub-cloud.browserstack.com/wd/hub"
      # You can specify the remote URL explicitly, or let the serenity-browserstack library do it for you
      capabilities {
        browserName = "Chrome"
        browserVersion = "latest"
        platformName = "windows"
        #
        # Any Browserstack-specific options go in the 'bstack:Options' section
        #
        "bstack:options" {
          os = "Windows"
          osVersion = "11"
          resolution = "1920x1200"
          seleniumVersion = "4.1.2"
          video = true
        }
      }
    }
  }
  saucelabs {
    #
    # You define the BrowserStack credentials either in the BROWSERSTACK_USER and BROWSERSTACK_KEY environment variables, or by
    # setting the following properties:
    #
    # browserstack.user = your.username
    # browserstack.key = your.access.key
    #
    webdriver {
      driver = "remote"
      remote.url = "https://"${SAUCE_USERNAME}":"${SAUCE_ACCESS_KEY}"@ondemand.us-west-1.saucelabs.com:443/wd/hub"

      browserName = "Chrome"
      browserVersion = "latest"
      platformName = "Windows 10"

      capabilities {
        "acceptInsecureCerts": true,
        "browserName": "chrome",
        "browserVersion": "latest",
        #
        # Chrome options
        #

        "goog:chromeOptions" {
          args = ["test-type", "ignore-certificate-errors", "--window-size=1000,800", "--no-sandbox",
            "--disable-dev-shm-usage", "incognito", "disable-infobars", "disable-gpu", "disable-default-apps",
            "disable-popup-blocking", "test-type", "ignore-certificate-errors", "--window-size=1000,800",
            "--no-sandbox", "--disable-dev-shm-usage", "incognito", "disable-infobars", "disable-gpu",
            "disable-default-apps", "disable-popup-blocking", "remote-allow-origins=*"
          ]
        }
        #
        # Any Saucelabs-specific options go in the 'sauce:options' section
        #
        "sauce:options" {
          //            "accessKey": "",
          "build": "Serenity-Saucelabs-build",
          "extendedDebugging": true,
          "maxDuration": 10800,
          "name": "Serenity-Saucelabs-Integration",
          //            "parent-tunnel": "",
          "tags": "Serenity-Saucelabs",
        }
      }
    }
  }
}

